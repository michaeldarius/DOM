-------------------------------------------------------------------------
								nxpython
  a 1:1 python interface to the nexus c api using swig and typemaps 
-------------------------------------------------------------------------


Introduction
============

nxpython represents just another interface to the core nexus library available for the C language.
it neither needs modification of the original c sources, nor does it require an additional python layer, 
nor does it annoy the python programmer with the creation and handling of opaque c pointers.
the pointer handling and argument input/output conversion is dealt by the language(python)-specific 
and function-specific typemaps supplied in a separate napi_typemaps.i file.  
This way the python functions act just as the python programmer would expect them to do, 
although there is a pretty one to one correspondance between C functions and python functions.
(take a look at the list of the available python routines below)



Installation Instructions
=========================
in order to get nxpython running, you need a recent copy of the nexus cvs sources(of course)
(the hdf libraries and the hdf 3rdparty librarys too, of course) and a recent version of swig (1.3.21 should suffice)
if you got hdf, nexus and swig installed on your system, just unpack the nxpython.tar.gz 
in the contrib dir in the nexus root dir and run 

./setup.py install 

(please do not forget to adapt the pathes in setup.py to point to the actual locations of hdf and nexus libs/includes.)

this should automatically create and install the nexus libs into the python 3rdparty modules directory.
starting the python interpreter, the nexus functions should be made available by typing

from nexus import *




Usage of API Routines in Python
===============================

General Initialization and Shutdown:
status, handle = NXopen (name, mode)
status = NXclose (handle)
status = NXmakegroup (handle, groupname, classname)
status = NXopengroup (handle, groupname, classname)
status = NXclosegroup (handle)
status = NXmakedata (handle, name, type, rank, dims[])
status = NXcompmakedata (handle, name, type, rank, dims[], comptype)
status = NXopendata (handle, name)
status = NXclosedata (handle)

Reading and Writing:
status, data[] = NXgetdata (handle)
status, data[] = NXgetslab (handle, start[], size[])
status, value, type = NXgetattr (handle, name, type)
status = NXputdata (handle, data[])
status = NXputslab (handle, data[], start[], size[])
status = NXputattr (handle, name, value, type)
status = NXflush (handle)

Meta-Data Routines:
status, rank, dims[], type  = NXgetinfo (handle)
status, nitems, path, class = NXgetgroupinfo (handle)
status = NXinitgroupdir (handle)
status, name, class, type = NXgetnextentry (handle)
status, nattrs = NXgetattrinfo (handle)
status = NXinitattrdir (handle)
status, name, length, type = NXgetnextattr (handle)

Linking and Group Hierarchy:
status, link NXgetgroupID (handle)
status, link NXgetdataID (handle)
status NXmakelink (handle, link)

